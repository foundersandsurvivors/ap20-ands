# bash functions used in deploy script
# usage: . /etc/environment (to get directory location of ap20 yggdrasil distro)
#        . $AP20_DISTRO/bin/bash.functions

# source the distro's .env (a LOCAL file derived from .env.sample)

. /etc/environment

#if [ "$AP20_DISTRO" == "" ]; then
#   echo "ERROR: envt variable AP20_DISTRO is not defined."
#   echo "Please update your /etc/environment with the directory you cloned ap20-yggdrasil into."
#   exit 1
#fi
#
#if ! [ -f $AP20_DISTRO/bin/.env ]; then
#   echo "ERROR: .env does not exist!"
#   echo "Create $DIR/.env by copying/symlinking to $DIR/.env.sample and modify as required."
#   exit 1
#fi
#. $AP20_DISTRO/bin/.env

# we need a hostname
#if [ -z $HOSTNAME ]; then
#   echo "ERROR: environemnt variable HOSTNAME is not defined!"
#   exit 2
#fi

# info
function ap20info {
  echo "-- AP20 environment vars:"
  printenv|grep AP20 
  echo "-- Yggdrasil deployment vars:"
  set|grep ^YGG|sort
}

function envinfo {
  echo "-- [$1] environment vars:"
  printenv|grep $1|sort
  echo "-- [$1] including additional deployment vars:"
  set|grep ^$1 |sort
}

# check environment vars are set
default_value () {
    name=$1
    new_default=$2
    eval current_value=\$$name
    if [ -z "$current_value" ] ; then
        eval $name="$new_default"
    fi
}
function checkenv {
  echo "== checkenv [$1] start:"
  bad=
  for V in $1
  do
      eval current_value=\$$V
echo "........................... V[$V] current_value[$current_value]"
      if [ -z "$current_value" ] ; then
         bad="Failed checkenv."
         echo ""
         echo "#### You need to set a value for environment variable [$V] ####"
         if [ -f ../src/etc/environment ]; then
             echo -n "     Suggestion(see ../src/etc/environment): ";grep "export $V" ../src/etc/environment|perl -pe 's/^.+=//g'
         fi
      else
         echo "Ok: envt var[$V]=[$current_value]"
      fi
      #default_value "ALREADY_SET" "Need to set environment var [$V]"
  done
  if [ "$bad" == "" ]; then
      echo "== checkenv done. All good. Proceeding."
  else
      echo "########################################################################################"
      echo "#### $bad Please modify your environment as suggested before proceeding ####"
      echo "########################################################################################"
      exit 1
  fi
}

# make a symlink (MUST have moved to the right dir first)
function symlink {
   LINKNAME=$1
   FILENAME=$2
   if ! [ -L $LINKNAME ]; then
       if [ -f $FILENAME ]; then
           ln -s $FILENAME $LINKNAME
           ls -la $LINKNAME
       else
           echo "BUG: symlink FILENAME[$FILENAME] does not exist!"
           exit 4
       fi
   fi
}


# make a directory and set ownership/permissions is requested
function makedir {
  D=$1
  OWNER=$2
  PERMS=$3
  if ! [ -d $D ]; then
     echo ""
     echo -- makedir $D $OWNER $PERMS
     sudo mkdir $D
     sudo chown $OWNER $D
     sudo chmod $PERMS $D
     ls -la $D
  fi
}

# copy a file and set ownership/permissions is requested
function copy {
  FROM=$1
  TO=$2
  OWNER=$3
  PERMS=$4
  DO=$5
  
  # if target does not exist, do it unless excluded host
  # if they are different 
  echo ""
  echo -- copy $FROM $TO [$DO]
  if ! [ -f $FROM ]; then
     echo "BUG: Does not exist FROM[$FROM]. Please correct repo or this script!"
     exit 9
  fi
  if [ -f $TO ]; then
     # it exists - reapply permissions
     sudo chown $OWNER $TO
     sudo chmod $PERMS $TO
     DIFF=`sudo diff -C0 $FROM $TO`
     if [ "$DIFF" == "" ]; then
         echo "   Exists and is identical - good."
     else
         echo "   *****************"
         echo "   * MANUAL ACTION * Please resolve DIFFERENCES and commit changes to the local repo. Differences:"
         echo "   *****************"
         sudo diff -C0 $FROM $TO
         ls -la $FROM $TO
     fi
  else
       # it doesn't exist
       if [ "$DO" == "do" ]; then
          echo "   Creating with $OWNER $PERMS"
          sudo cp $FROM $TO
          sudo chown $OWNER $TO
          sudo chmod $PERMS $TO
          ls -la $TO
       else
       echo "   To be created with $OWNER $PERMS"
       fi
  fi
}

